apply plugin: 'com.android.application'
apply plugin: 'com.neenbedankt.android-apt'
apply plugin: 'me.tatarka.retrolambda'

def keyStore = file('hotmall.jks')

android {
    compileSdkVersion rootProject.ext.android.compileSdkVersion
    buildToolsVersion rootProject.ext.android.buildToolsVersion

    defaultConfig {
        applicationId "com.hotmall"
        minSdkVersion rootProject.ext.android.minSdkVersion
        targetSdkVersion rootProject.ext.android.targetSdkVersion
        versionCode new Date().format("yyyyMMdd").toInteger() * 1000 + 1
        versionName "1.0"
        multiDexEnabled false
        resConfigs "zh"
        sourceSets.main {
            jniLibs.srcDir 'libs'
            jni.srcDirs = []
        }
    }
    signingConfigs {
        signingConfig {
            try {
                keyAlias 'hotmall'
                keyPassword project.hasProperty('KEY_PASSWORD') ? KEY_PASSWORD : ''
                storeFile file('../hotmall.jks')
                storePassword project.hasProperty('STORE_PASSWORD') ? STORE_PASSWORD : ''
            }
            catch (ex) {
                throw new InvalidUserDataException("You should define KEYSTORE_PASSWORD and KEY_PASSWORD in gradle.properties.")
            }
        }
    }
    buildTypes {
        debug {
            buildConfigField "String", "API_URL", '"http://github.com"'
            versionNameSuffix '-' + new Date().format("yyyyMMddHHmm")
        }
        release {
            buildConfigField "String", "API_URL", '"http://github.com"'
            buildConfigField "boolean", "LOG_DEBUG", "false"
            debuggable false
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            if (keyStore.exists()) {
                println "hotmall: using project's key"
                signingConfig signingConfigs.signingConfig
            } else {
                println "hotmall: using default key"
            }

        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    lintOptions {
        checkReleaseBuilds false
        abortOnError false
        disable 'InvalidPackage'
        lintConfig file("lint.xml")
    }
    dexOptions {
        incremental true
        javaMaxHeapSize "8g"
    }
}
allprojects {
    repositories {
        flatDir {
            dirs 'aars' //this way we can find the .aar file in libs folder
        }
        maven { url "https://oss.sonatype.org/content/repositories/snapshots/" }
        maven { url "https://jitpack.io" }
        maven { url "http://dl.bintray.com/tbruyelle/tbruyelle" }
        maven { url "https://s3.amazonaws.com/repo.commonsware.com" }
    }
}
dependencies {
    compile fileTree(include: ['*.jar'], dir: 'libs')
    testCompile 'junit:junit:4.12'
    compile project(':library')
    compile rootProject.ext.dependencies["appcompat-v7"]
    compile rootProject.ext.dependencies["support-v4"]
    compile rootProject.ext.dependencies["design"]
    compile rootProject.ext.dependencies["recyclerview-v7"]
    compile rootProject.ext.dependencies["cardview-v7"]
    compile rootProject.ext.dependencies["percent"]
    compile rootProject.ext.dependencies["eventbus"]
    compile rootProject.ext.dependencies["butterknife"]
    compile rootProject.ext.dependencies["rxjava"]
    compile rootProject.ext.dependencies["rxandroid"]
    compile rootProject.ext.dependencies["okhttp-urlconnection"]
    compile rootProject.ext.dependencies["okhttp"]
    compile rootProject.ext.dependencies["okio"]
    compile rootProject.ext.dependencies["glide"]
    compile rootProject.ext.dependencies["glide-okhttp-integration"]
    compile rootProject.ext.dependencies["activeandroid"]
    compile rootProject.ext.dependencies["adapterdelegates"]
    compile rootProject.ext.dependencies["logansquare-compiler"]
    compile rootProject.ext.dependencies["logansquare"]

}
